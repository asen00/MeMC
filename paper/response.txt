We thank the referees for the generous comments. We have taken care of most of them. The comments have significantly improved the quality of the code. Below, we summarize the changes that we have made in our package as well as in the paper.

`Consider fixing the compilation warnings listed below:
src/init.cpp: In function ‘void init_read_parameters(MBRANE_para*, AFM_para*, MCpara*, char*)’:
src/init.cpp:102:37: warning: format ‘%d’ expects a matching ‘int*’ argument [-Wformat=] ...`

We have fixed all the compilation warnings in the current version. We have checked
that the fix works with compiler version gcc-5.4 and gcc-12.1. 

`Is there a reason to use 60000 MC steps by default? Should this parameter be
accessible to the user in the exe_start driver?`

Thank you for the suggestion. In the current version, we have made this parameter accessible
to the user. The user can input this parameter as the fourth command line argument
to `exe_start` driver. 

Code organization:

`Consider generating a library so that external application codes can link to it.
Consider moving the bulk of the work performed in the drivers start.cpp and
memc.cpp to separate functions located at the src/ folder. This way, you can create
a library that distributes those functionalities to external users.`

The code was already organized in the suggested manner. All the functions are
defined in the files stored in `src/` folder and only the function calls are done
from `start.cpp` and `memc.cpp`. Since the compilation time itself of our package is
very small, we have not considered generating a library. As we develop further and
the code grows we will surely make a library for the functions in `src/`.


`I could not find API documentation anywhere. For example, what are the meanings of the
input/output parameters used in functions such as monte_carlo_surf2d,
pairlj_total_energy, and monte_carlo_3d? Consider using a documentation generator
tool such as Doxygen. Note that functions should be annotated to be able to
automatically generate the documentation.`

We have generated the documentation using Doxygen and is now hosted at vipinagrawal25.github.io/MeMC. We have mentioned this in readme as well.

`Add a make clean target (could be the same as make distclean).`

We have added the make clean target in the Makefile to remove all the build objects
and executables.

`Code performance:
Have you considered multithreading, e.g., via OpenMP, to speedup functions that take
most of the execution time? For example, Gprof indicates that cal_length takes up to
70% of the execution time of exe_start and bending_energy_ipart takes up to 90% of
the execution time of exe_memc. Would it be possible to reduce the execution time of
these particular functions?`

We thank the referee for this suggestion. Regarding optimizing `exe_memc`: we are able to optimize the `bending_energy_ipart` further by vectorizing some operations and reduce the compute time of bending_energy_ipart 4%. 
However, this routine is called the atleast 6 times more than any other functions, 
and the number of floating point operations in the function is large.
It is natural to expect this function to be a major bottleneck in the code.
The current profile report is included in the repository (paper/prof_report.txt).

`The number of calls to `cal_length` in `exe_start` is considerably large. Therefore, we expect this function to be the bottleneck too. However, the sole purpose of `exe_start` is to generate initial configuration to be fed into `exe_memc`. A single simulation can generate multiple such configurations and the user need not execute `exe_start` again. Thus, optimizing this driver is not so urgent.'

We agree with the referee that openMP parallelization can be helpful. However, in the Monte-Carlo simulations, the parallelization is not immediately obvious as only one particle can be moved
randomly at a given instance. During parallelization it may happen that multiple moves are made simultaneously. For this reason, we have postponed openMP parallelization till careful consideration. We have added the suggestion in the todo list and will implement them in future.

`Minor changes in the text:'
`Lines 60-61: did you mean: there are two elastic constants to be determined? Can you
elaborate on this statement?`

They are not to be determined but they are input parameters. We have clarified this in the text lines 61--63.

`Line 64: should the definition of R be moved closer to its first appearance, i.e.,
closer to Equation 3?`

Yes. We now define R below equation 3.

`What is the meaning of K_B in Equation 6?`

k_B is the Boltzmann constant (1.380649 × 10-23 SI units). We have also added the definition in the text. 

`What is the meaning of H in Equation 9?`

H is the spring constant of the individual bonds between the nodes. Itzykson (see the paper cited in line 229) has shown that for a randomly triangulated membrane, the Young's modulus Y=2H/sqrt{3}. 

`Lines 110-113, 119, 127: which subsubsection are you talking about? I cannot see the
numbers.`

In the earlier version, the referencing was done incorrectly. Now we have fixed it.

`In Equation 17, how \Delta V is computed? Is it simply V - V_0?`

No, it is not. We have now added a paragraph below equation (17) to clarify this confusion.

`Line 121-122: remove the text ::: subequations :::`

Done.

`Add community guidelines which should contain information about how to:
Contribute to the software.`
`Report issues or problems with the software.
Seek support.`

We have added the following to the text:
# How to contribute
The code is licensed under GPL-3.0 and hosted at [here](https://github.com/vipinagrawal25/MeMC).
For any contribution, the developer can send a [pull request](https://github.com/vipinagrawal25/MeMC/pulls).
For any queries, the user should open an [issue](https://github.com/vipinagrawal25/MeMC/issues) on github.

`Add white background to the figure: https://github.com/vipinagrawal25/MeMC/blob/main/paper/fig/describe_theta.png`.

We have now made the background white.


`Update links in https://github.com/vipinagrawal25/MeMC/blob/main/README.md#example
gnuplot: http://www.gnuplot.info/
GNU GSL: https://www.gnu.org/software/gsl/`

We have fixed all the links


`Statement of need The target audience is somewhat implicit.'

The target audience are physicists and biologists working in soft matter.

`References The (n.d. …) style references are syntactically correct?'

We have now fixed it.

Functionality/Performance No performance claims.

We have not tested the code in various platform to comment on the performance.
